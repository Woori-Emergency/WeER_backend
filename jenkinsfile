pipeline {
    agent any

    tools {
        jdk 'jdk21'
    }

    environment {
        AWS_CREDENTIALS_ID = credentials('aws-credentials')
        DOCKER_CREDENTIALS_ID = credentials('DOCKER_CREDENTIALS_ID')
        SPRING_APPLICATION_SECRET = credentials('application-secret')
        JAVA_HOME = '/var/jenkins_home/tools/hudson.model.JDK/jdk21/amazon-corretto-21.0.5.11.1-linux-x64'
        ECR_URL = credentials('ECR_URL')
        GITOPS_REPO_URL = credentials('gitops-repo')
        GITOPS_REPO_CREDENTIALS = credentials('gitops-token')
        GCP_PROJECT_ID = credentials('gcr-admin')
    }
    stages {
            stage('Cleanup Workspace') {
                steps {
                    script {
                        // 워크스페이스 정리
                        cleanWs()

                        // Docker 시스템 정리
                        sh '''
                            docker system prune -af --volumes
                            docker image prune -af
                            df -h
                        '''

                        // 오래된 빌드 결과물 정리
                        sh '''
                            rm -rf ~/.gradle/caches/
                            rm -rf ~/.gradle/wrapper/
                            rm -rf /var/jenkins_home/.gradle/
                        '''
                    }
                }
            }

            stage('Clone Repository') {
                steps {
                    git branch: 'refactor/108',
                        url: 'https://github.com/Woori-Emergency/WeER_backend.git'
                }
            }

            stage('Prepare Environment') {
                steps {
                    withCredentials([file(credentialsId: 'application-secret', variable: 'applicationSecret')]){
                        script {
                            sh 'cp $applicationSecret src/main/resources/application-secret.yml'
                        }
                    }
                }
            }

                    stage('Build JAR') {
                        steps {
                            script {
                                sh '''
                                    chmod +x gradlew
                                    ./gradlew clean build -x test --stacktrace
                                '''
                            }
                        }
                    }


            stage('SonarQube Analysis') {
                steps {
                    script {
                        withSonarQubeEnv(credentialsId: "SonarQube-Token", installationName: 'SonarServer') {
                            sh """
                            # ./gradlew jacocoTestReport
                            ./gradlew sonarqube --info \
                                -Dsonar.projectKey=weer-be \
                                -Dsonar.host.url=http://43.200.78.125:9000 \
                                -Dsonar.sources=src/main/java \
                            #    -Dsonar.tests=src/test/java \
                            #    -Dsonar.reportPath=build/jacoco/test.exec \
                                -Dsonar.java.binaries=build/classes/java/main \
                                -Dsonar.qualitygate.skip=true

                            """
                        }
                    }
//                     script {
//                         timeout(time: 3, unit: 'MINUTES') {
//                             def qg = waitForQualityGate()
//                             if (qg.status != 'OK') {
//                                 error "Pipeline aborted due to quality gate failure: ${qg.status}"
//                             }
//                         }
//                     }
                }
            }

            stage('Build Docker Image') {
                steps {
                    script {
                        def jarFile = sh(script: "find build/libs -name '*.jar' | head -n 1", returnStdout: true).trim()
                        echo "Found JAR file: ${jarFile}"

                        if (!fileExists(jarFile)) {
                            error("JAR 파일을 찾을 수 없습니다!")
                        }

                        sh """
                            docker build -t ${ECR_URL}:${BUILD_NUMBER} \\
                                --build-arg JAR_FILE=${jarFile} \\
                                --build-arg SECRET_FILE=src/main/resources/application-secret.yml .
                        """
                    }
                }
            }

            stage('Upload Image to ECR') {
                steps {
                    script {
                         sh """
                                docker images
                                aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${ECR_URL}
                                docker push ${ECR_URL}:${BUILD_NUMBER}
                            """
                    }
                }
            }

            stage('Upload Image to GCR') {
                steps {
                    script {
                            sh """
                                echo '빌드와 푸시가 성공했습니다!'
                                echo '빌드와 푸시가 성공했습니다!'
                                echo '빌드와 푸시가 성공했습니다!'
                                echo '빌드와 푸시가 성공했습니다!'
                                echo '빌드와 푸시가 성공했습니다!'
                                echo '빌드와 푸시가 성공했습니다!'
                            """
                    }
                }
            }


            stage('Update K8S Manifest'){
                steps{
                    dir('k8s-manifest'){
                        git url: GITOPS_REPO_URL, branch: 'develop', credentialsId: 'gitops-token'
                        withCredentials([usernamePassword(credentialsId: 'gitops-token', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PAT')]){
                        sh '''
                            sed -i "s|image: .*$|image: vamlin/weer-backend:1.0.33|" applications/weer/base/rollout.yaml
                            git config user.name "Ungbbi"
                            git config user.email "mandarin1999@naver.com"
                            git commit -am "Image updated in ECR WeER:${BUILD_NUMBER}"
                            git push https://Ungbbi:${GIT_PAT}@github.com/Woori-Emergency/WeER_gitops develop
                        '''
                        }
                    }
                }
            }
        }

        post {
            always {
                script {
                    // 빌드 후 정리
                    sh '''
                        docker system prune -af
                        docker image prune -af
                        rm -rf ~/.gradle/
                        df -h
                    '''
                    cleanWs()
                }
            }
            success {
                echo '빌드와 푸시가 성공했습니다!'
            }
            failure {
                echo '빌드 또는 푸시가 실패했습니다.'
            }
        }
    }