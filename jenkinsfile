pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'weerfisa/weerBE'  // Docker Hub 이미지 이름
        DOCKER_CREDENTIALS_ID = 'Docker-credential'           // Jenkins에 저장된 Docker Hub 자격증명 ID

    }

    stages {
        stage('Clone Repository') {
            steps {
                    git branch: 'test/jenkins',                                    // 빌드할 브랜치
                    credentialsId: "${GITHUB_CREDENTIALS_ID}",
                    url: 'https://github.com/Woori-Emergency/WeER_backend.git'
            }
        }

        stage('Build JAR') {
            steps {
                script {
                    // Gradle 빌드 실행
                    sh './gradlew clean build'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def jarFile = sh(script: "find build/libs -name '*.jar' | head -n 1", returnStdout: true).trim()
                    if (!fileExists(jarFile)) {
                        error("JAR file not found! Ensure the build step produces a JAR.")
                    }

                    sh """
                    docker build -t ${DOCKER_IMAGE_NAME}:latest --build-arg JAR_FILE=${jarFile} .
                    """
                }
            }
        }


        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: "${DOCKER_CREDENTIALS_ID}") {
                        sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build and push succeeded!'
        }
        failure {
            echo 'Build or push failed.'
        }
    }
}
