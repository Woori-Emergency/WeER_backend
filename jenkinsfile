pipeline {
    agent any

    tools {
        jdk 'jdk21'
    }

    environment {
        AWS_CREDENTIALS_ID = credentials('aws-credentials')
        DOCKER_IMAGE_NAME = 'weer/be'
        DOCKER_CREDENTIALS_ID = credentials('DOCKER_CREDENTIALS_ID')
        SPRING_APPLICATION_SECRET = credentials('application-secret')
        JAVA_HOME = '/var/jenkins_home/tools/hudson.model.JDK/jdk21/amazon-corretto-21.0.5.11.1-linux-x64'
        ECR_URL = credentials('ECR_URL')
        IMAGE_TAG = "${ECR_URL}/${DOCKER_IMAGE_NAME}:latest"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'test/jenkins',
                    url: 'https://github.com/Woori-Emergency/WeER_backend.git'
            }
        }

        stage('Prepare Environment') {
            steps {
                script {
                    writeFile file: 'application-secret.yml', text: SPRING_APPLICATION_SECRET
                    sh '''
                        mkdir -p src/main/resources/
                        mv application-secret.yml src/main/resources/
                    '''
                }
            }
        }

        stage('Check Java') {
            steps {
                sh '''
                    export PATH=$JAVA_HOME/bin:$PATH
                    echo "JAVA_HOME: $JAVA_HOME"
                    echo "PATH: $PATH"
                    java -version
                '''
            }
        }

//         stage('Build JAR') {
//             steps {
//                 script {
//                     sh '''
//                         chmod +x gradlew
//                         ./gradlew clean build -x test --stacktrace
//                     '''
//                 }
//             }
//         }

        stage('Build Docker Image') {
            steps {
                script {
                    def jarFile = sh(script: "find build/libs -name '*.jar' | head -n 1", returnStdout: true).trim()
                    if (!fileExists(jarFile)) {
                        error("JAR file not found! Ensure the build step produces a JAR.")
                    }

                    sh """
                        docker build -t ${IMAGE_TAG} \\
                            --build-arg JAR_FILE=${jarFile} \\
                            --build-arg SECRET_FILE=src/main/resources/application-secret.yml .
                    """
                }
            }
        }

        stage('Upload Image to ECR') {
            steps {
                script {
                    withAWS(credentials: AWS_CREDENTIALS_ID, region: 'ap-northeast-2') {
                        sh """
                            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${ECR_URL}
                            docker tag ${IMAGE_TAG} ${IMAGE_TAG}
                            docker push ${IMAGE_TAG}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Build and push succeeded!'
        }
        failure {
            echo 'Build or push failed.'
        }
    }
}