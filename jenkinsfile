pipeline {
    agent any
    // jenkins 에 tools 로 설치한 jdk 사용
    tools {
        jdk 'jdk21'
    }

    environment {
        DOCKER_IMAGE_NAME = credentials('DOCKER_IMAGE_NAME')  // Docker Hub 이미지 이름
        DOCKER_CREDENTIALS_ID = credentials('DOCKER_CREDENTIALS_ID')       // Jenkins에 저장된 Docker Hub 자격증명 ID
        SPRING_APPLICATION_SECRET = credentials('application-secret')
        JAVA_HOME = '/var/jenkins_home/tools/hudson.model.JDK/jdk21/amazon-corretto-21.0.5.11.1-linux-x64'
    }

    stages {
        stage('Clone Repository') {
            steps {
                    git branch: 'test/jenkins',                                    // 빌드할 브랜치
                    url: 'https://github.com/Woori-Emergency/WeER_backend.git'
            }
        }

        stage('Prepare Environment'){
            steps{
                    script{
                            // application-secret 생성
                           writeFile file: 'application-secret.yml', text: SPRING_APPLICATION_SECRET
                           // 생성된 파일 확인
                           sh 'ls -la application-secret.yml'
                           sh 'mv application-secret.yml src/main/resources/'

                    }
            }
        }

        stage('Check Java') {  // Java 설정 확인을 위한 디버깅 스테이지 추가
                            steps {
                                sh '''
                                    export PATH=$JAVA_HOME/bin:$PATH
                                    echo "JAVA_HOME: $JAVA_HOME"
                                    echo "PATH: $PATH"
                                    java -version
                                '''
                            }
                        }

        stage('Build JAR') {
            steps {
                script {
                    sh 'chmod +x gradlew'
                    // Gradle 빌드 실행
                    sh './gradlew clean build -x test --profile'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // JAR 파일 찾기 - 안전한 방식으로 수정
                    def jarFile = ""
                    dir('build/libs') {
                        jarFile = sh(
                            script: "find . -name '*.jar' -type f | head -n 1",
                            returnStdout: true
                        ).trim()

                        // 상대 경로에서 ./를 제거
                        jarFile = jarFile.replaceFirst('^./', '')

                        if (jarFile.isEmpty()) {
                            error("JAR 파일을 찾을 수 없습니다. 빌드 단계에서 JAR가 정상적으로 생성되었는지 확인하세요.")
                        }
                    }

                    // Docker 이미지 빌드 - 보안 취약점 수정
                    def dockerBuildCmd = """
                        docker build \
                        --no-cache \
                        -t '${env.DOCKER_IMAGE_NAME}:latest' \
                        --build-arg JAR_FILE='build/libs/${jarFile}' \
                        --build-arg SECRET_FILE='application-secret.yml' \
                        .
                    """

                    // Docker 빌드 실행
                    withDockerRegistry([ credentialsId: "DOCKER_CREDENTIALS_ID", url: "" ]) {
                        sh dockerBuildCmd
                    }
                }
            }
        }


        stage('Push Docker Image') {
            steps {
                script {
                    // Docker Hub 로그인 및 Push
                    withDockerRegistry(credentialsId: "${DOCKER_CREDENTIALS_ID}") {
                        sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build and push succeeded!'
        }
        failure {
            echo 'Build or push failed.'
        }
    }
}
